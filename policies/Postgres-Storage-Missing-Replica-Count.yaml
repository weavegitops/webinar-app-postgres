apiVersion: pac.weave.works/v1
kind: Policy
metadata:
  name: weave.policies.postgres-storage-missing-replica-count
spec:
  id: weave.policies.postgres-storage-missing-replica-count
  name: PostGres Storage Missing Replica Count
  enabled: true
  description: "Use this Policy to to check the replica count for your postgres storageos storage exists. If the replica count label is missing, the Policy will be in violation. \n"
  how_to_solve: |
    The replica count should be set.
    ```
    spec: 
      volumeClaimTemplates:
      - metadata:
          labels:
            storageos.com/replicas: <replica_count>
    ```
    https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment
  category: weave.categories.reliability
  severity: medium
  targets: {kinds: [StatefulSet], namespaces: [postgres]}
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  tags: [soc2-type1, prod, postgres]
  parameters:
    - name: exclude_namespaces
      type: array
      required: false
      value: [flux-system, kube-system]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.pods.postgres_storage_missing_replica_count
    import future.keywords.in
    app_name = "postgres"
    replica_count := input.parameters.replica_count
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      not controller_input.spec.volumeClaimTemplates[0].metadata.labels["storageos.com/replicas"]
      result = {
        "issue detected": true,
        "msg": sprintf("storageos.com/replicas count label must exist; found '%v'.", [controller_input.spec.volumeClaimTemplates[0].metadata.labels]),
        "violating_key": "spec.volumeClaimTemplates[0].metadata.labels",
      }
    }
    controller_input = input.review.object
    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }
    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
