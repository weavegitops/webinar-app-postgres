apiVersion: pac.weave.works/v2beta1
kind: Policy
metadata:
  name: weave.policies.postgres-storageclassname
spec:
  id: weave.policies.postgres-storageclassname
  name: PostGres StorageClassName
  enabled: true
  description: "Use this Policy to to check and ensure that a certain StorageClassName is set correctly for Postgres. The value set in the Policy is compared to the actuall requested StorageClassName if they don't match, the Policy will be in violation. \n"
  how_to_solve: |
    The requested StorageClassName should be set.
    ```
    spec: 
      volumeClaimTemplates:
      - spec:
          storageClassName: <storage_class_name>
    ```
    https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#scaling-a-deployment
  category: weave.categories.reliability
  severity: medium
  targets: {kinds: [StatefulSet], namespaces: [postgres]}
  standards:
    - id: weave.standards.soc2-type-i
      controls:
        - weave.controls.soc2-type-i.2.1.1
  tags: [soc2-type1, prod, postgres]
  parameters:
    - name: storage_class_name
      type: string
      required: true
      value: storageos
    - name: exclude_namespaces
      type: array
      required: false
      value: [flux-system, kube-system]
    - name: exclude_label_key
      type: string
      required: false
      value:
    - name: exclude_label_value
      type: string
      required: false
      value:
  code: |
    package weave.advisor.pods.postgres_storageclassname
    import future.keywords.in
    app_name = "postgres"
    storage_class_name := input.parameters.storage_class_name
    exclude_namespaces := input.parameters.exclude_namespaces
    exclude_label_key := input.parameters.exclude_label_key
    exclude_label_value := input.parameters.exclude_label_value
    violation[result] {
      isExcludedNamespace == false
      not exclude_label_value == controller_input.metadata.labels[exclude_label_key]
      some i
      containers := controller_spec.containers[i]
      contains(containers.image, app_name)
      not controller_input.spec.volumeClaimTemplates[0].spec.storageClassName == storage_class_name
      result = {
        "issue detected": true,
        "msg": sprintf("Requested storageClassName is '%v'; found '%v'.", [replica_count, controller_input.spec.volumeClaimTemplates[0].spec.storageClassName"),
        "violating_key": "spec.volumeClaimTemplates[0].spec.storageClassName"",
        "recommended_value": storage_class_name
      }
    }
    controller_input = input.review.object
    # controller_container acts as an iterator to get containers from the template
    controller_spec = controller_input.spec.template.spec {
      contains_kind(controller_input.kind, {"StatefulSet"})
    } else = controller_input.spec {
      controller_input.kind == "Pod"
    } else = controller_input.spec.jobTemplate.spec.template.spec {
      controller_input.kind == "CronJob"
    }
    contains_kind(kind, kinds) {
      kinds[_] = kind
    }
    isExcludedNamespace = true {
    	controller_input.metadata.namespace
    	controller_input.metadata.namespace in exclude_namespaces
    } else = false
